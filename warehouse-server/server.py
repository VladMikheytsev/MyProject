import json
import os
from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from typing import Dict, Any

app = FastAPI()

# ‚úÖ –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ CORS
origins = [
    "http://localhost:3000",                          # –ª–æ–∫–∞–ª—å–Ω—ã–π React
    "https://my-project-navy-theta.vercel.app",       # Vercel-–¥–µ–ø–ª–æ–π
    "https://warehouse-vlad.ngrok.io",                # –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π ngrok-–¥–æ–º–µ–Ω
]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,            # ‚Üê –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# üìÅ –ü—É—Ç—å –¥–æ JSON-—Ñ–∞–π–ª–∞
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
DB_FILE = os.path.join(BASE_DIR, "warehouse_db.json")

# üì¶ –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
DEFAULT_DATA = {
    "warehouses": [],
    "items": [],
    "itemTypes": [
        {"id": 1, "name": "–ì–µ–ª—å", "color": "#3b82f6"},
        {"id": 2, "name": "–†–∞—Å—Ö–æ–¥–Ω–∏–∫–∏", "color": "#16a34a"},
        {"id": 3, "name": "–ö–æ—Ä–æ–±–∫–∏", "color": "#f97316"}
    ]
}

def load_db():
    try:
        with open(DB_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return DEFAULT_DATA

def save_db(data: Dict):
    with open(DB_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

# --- –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö Pydantic ---
class UserRegistration(BaseModel):
    user_id: int
    role: str

# --- API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã ---
@app.on_event("startup")
def initialize_db():
    if not os.path.exists(DB_FILE):
        print("warehouse_db.json –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞—é —Å –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.")
        save_db(DEFAULT_DATA)

@app.get("/api/data")
async def get_all_data():
    return load_db()

@app.post("/api/data")
async def update_all_data(data: Dict[str, Any]):
    db = load_db()
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ —á–∞—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—à–ª–∏, —Å–æ—Ö—Ä–∞–Ω—è—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    db["warehouses"] = data.get("warehouses", db["warehouses"])
    db["items"] = data.get("items", db["items"])
    db["itemTypes"] = data.get("itemTypes", db["itemTypes"])
    save_db(db)
    return {"status": "success"}

@app.get("/api/user/{user_id}")
async def get_user_role(user_id: int):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ Telegram ID."""
    db = load_db()
    user_data = db.get("users", {}).get(str(user_id))
    if user_data:
        return {"role": user_data.get("role", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")}
    return {"role": "unregistered"}

@app.post("/api/register")
async def register_user(registration_data: UserRegistration):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    db = load_db()
    users = db.get("users", {})
    users[str(registration_data.user_id)] = {"role": registration_data.role}
    db["users"] = users
    save_db(db)
    return {"status": "success", "role": registration_data.role}
