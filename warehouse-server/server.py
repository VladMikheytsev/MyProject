import json
import os
from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from typing import Dict, Any, List

app = FastAPI()

# ‚úÖ –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ CORS
origins = [
    "http://localhost:3000",
    "https://my-project-navy-theta.vercel.app",
    "https://warehouse-vlad.ngrok.io",
]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# üìÅ –ü—É—Ç—å –¥–æ JSON-—Ñ–∞–π–ª–∞
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
DB_FILE = os.path.join(BASE_DIR, "warehouse_db.json")

# üì¶ –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
DEFAULT_DATA = {
    "warehouses": [],
    "items": [],
    "itemTypes": [
        {"id": 1, "name": "–ì–µ–ª—å", "color": "#3b82f6"},
        {"id": 2, "name": "–†–∞—Å—Ö–æ–¥–Ω–∏–∫–∏", "color": "#16a34a"},
        {"id": 3, "name": "–ö–æ—Ä–æ–±–∫–∏", "color": "#f97316"}
    ],
    "users": []
}

# üì• –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ —Ñ–∞–π–ª–∞
def load_db() -> Dict[str, Any]:
    try:
        with open(DB_FILE, "r", encoding="utf-8") as f:
            print("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ warehouse_db.json")
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        print("‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω, –≤–æ–∑–≤—Ä–∞—â–∞—é –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return DEFAULT_DATA.copy()

# üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
def save_db(data: Dict[str, Any]):
    with open(DB_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)
    print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {len(data.get('warehouses', []))} —Å–∫–ª–∞–¥–æ–≤, "
          f"{len(data.get('items', []))} —Ç–æ–≤–∞—Ä–æ–≤, {len(data.get('users', []))} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

# üöÄ –ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ ‚Äî —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
@app.on_event("startup")
def initialize_db():
    if not os.path.exists(DB_FILE):
        print("üìÇ warehouse_db.json –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞—é —Ñ–∞–π–ª.")
        save_db(DEFAULT_DATA)
    else:
        # –¥–æ–±–∞–≤–∏–º –∫–ª—é—á "users" –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        data = load_db()
        if "users" not in data:
            data["users"] = []
            save_db(data)

# üì§ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
@app.get("/api/data")
async def get_all_data():
    return load_db()

# üì• –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
@app.post("/api/data")
async def update_all_data(data: Dict[str, Any], request: Request):
    print("üì• POST /api/data ‚Äî –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:")
    print(json.dumps(data, indent=2, ensure_ascii=False))

    if data == DEFAULT_DATA:
        print("‚õîÔ∏è –ü–æ–ª—É—á–µ–Ω—ã –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ‚Äî –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é.")
        return {"status": "skipped"}
    save_db(data)
    return {"status": "success"}

# üîß Preflight-–∑–∞–ø—Ä–æ—Å
@app.options("/api/data")
async def options_handler():
    return JSONResponse(status_code=200, content={"ok": True})

# üÜï –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@app.post("/api/register_user")
async def register_user(request: Request):
    new_user = await request.json()
    db = load_db()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç –ø–æ telegram_id
    if any(user.get("telegram_id") == new_user.get("telegram_id") for user in db.get("users", [])):
        return {"status": "exists"}

    new_user["role"] = "–Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"
    db.setdefault("users", []).append(new_user)
    save_db(db)
    print(f"üÜï –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {new_user['first_name']} {new_user['last_name']}")
    return {"status": "ok"}

# üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@app.get("/api/users")
async def get_users():
    db = load_db()
    return db.get("users", [])
