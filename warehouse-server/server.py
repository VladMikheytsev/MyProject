# server.py

from fastapi import FastAPI, HTTPException, Request
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import json
import uuid
import os

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
DB_FILE = "warehouse_db.json"

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI ---
app = FastAPI()

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS ---
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# --- –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö ---
db = {
    "warehouses": [],
    "items": [],
    "itemTypes": [],
    "users": [],
    "scenarios": [],
    "signatures": {} # <-- [–ò–ó–ú–ï–ù–ï–ù–û] –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–µ–π
}

# --- –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö (Pydantic) ---
class UserRegistration(BaseModel):
    username: str
    password: str
    firstName: str
    lastName: str
    position: str
    phone: str
    assignedWarehouseId: str | int

class UserLogin(BaseModel):
    username: str
    password: str

class AppData(BaseModel):
    warehouses: list
    items: list
    itemTypes: list
    scenarios: list
    signatures: dict # <-- [–ò–ó–ú–ï–ù–ï–ù–û] –î–æ–±–∞–≤–ª–µ–Ω–∞ –º–æ–¥–µ–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–µ–π

def load_data():
    global db
    if os.path.exists(DB_FILE):
        with open(DB_FILE, 'r', encoding='utf-8') as f:
            loaded_db = json.load(f)
            for key in db.keys():
                db[key] = loaded_db.get(key, [] if key != 'signatures' else {})
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ {DB_FILE}")
    else:
        db["users"] = [
            {
                "id": "vladislav-admin", "username": "Vladislav", "password": "Eh45TbrNMi986V7",
                "role": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "firstName": "–í–ª–∞–¥–∏—Å–ª–∞–≤", "lastName": "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä",
                "position": "–ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "phone": "000-000-0000", "assignedWarehouseId": "office"
            },
            {
                "id": "moderator-admin", "username": "Moderator", "password": "Eh45TbrNMi986V71!",
                "role": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "firstName": "–°—Ç–∞—Ä—à–∏–π", "lastName": "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä",
                "position": "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä", "phone": "111-111-1111", "assignedWarehouseId": "office"
            }
        ]
        save_data()
        print(f"‚ö†Ô∏è –§–∞–π–ª {DB_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")

def save_data():
    with open(DB_FILE, 'w', encoding='utf-8') as f:
        json.dump(db, f, ensure_ascii=False, indent=4)
    print(f"üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {DB_FILE}")

# --- –°–æ–±—ã—Ç–∏—è –∑–∞–ø—É—Å–∫–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
@app.on_event("startup")
async def startup_event():
    load_data()

# --- –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã (–º–∞—Ä—à—Ä—É—Ç—ã) API ---

@app.get("/data")
async def get_app_data():
    return {
        "warehouses": db.get("warehouses", []),
        "items": db.get("items", []),
        "itemTypes": db.get("itemTypes", []),
        "scenarios": db.get("scenarios", []),
        "signatures": db.get("signatures", {}) # <-- [–ò–ó–ú–ï–ù–ï–ù–û] –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–¥–ø–∏—Å–∏
    }

@app.post("/data")
async def save_app_data(data: AppData):
    global db
    db["warehouses"] = data.warehouses
    db["items"] = data.items
    db["itemTypes"] = data.itemTypes
    db["scenarios"] = data.scenarios
    db["signatures"] = data.signatures # <-- [–ò–ó–ú–ï–ù–ï–ù–û] –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∏
    save_data()
    return {"message": "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã"}

@app.get("/users")
async def get_users():
    return db.get("users", [])

@app.post("/login")
async def login_user(credentials: UserLogin):
    for user in db["users"]:
        if user["username"] == credentials.username and user["password"] == credentials.password:
            return user
    raise HTTPException(status_code=401, detail="–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å")

@app.post("/register")
async def register_user(user_data: UserRegistration):
    global db
    if any(user["username"] == user_data.username for user in db["users"]):
        raise HTTPException(status_code=400, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

    new_user = {
        "id": str(uuid.uuid4()),
        "username": user_data.username,
        "password": user_data.password,
        "firstName": user_data.firstName,
        "lastName": user_data.lastName,
        "position": user_data.position,
        "phone": user_data.phone,
        "assignedWarehouseId": user_data.assignedWarehouseId,
        "role": "–ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"
    }
    db["users"].append(new_user)
    save_data()
    return new_user

@app.put("/users/{user_id}")
async def update_user(user_id: str, updated_data: Request):
    global db
    user_index = -1
    for i, u in enumerate(db["users"]):
        if u["id"] == user_id:
            user_index = i
            break
    
    if user_index == -1:
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

    data = await updated_data.json()
    db["users"][user_index].update(data)
    save_data()
    return db["users"][user_index]

@app.delete("/users/{user_id}")
async def delete_user(user_id: str):
    global db
    original_len = len(db["users"])
    db["users"] = [u for u in db["users"] if u["id"] != user_id]
    
    if len(db["users"]) == original_len:
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
    save_data()
    return {"message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"}