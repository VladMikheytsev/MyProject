import json
import aiohttp
import logging
import asyncio
import os

from aiogram import Bot, Dispatcher, F, types
from aiogram.types import Message, WebAppInfo
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.utils.keyboard import ReplyKeyboardBuilder  # ‚úÖ –í–û–¢ –≠–¢–û


# ‚úÖ –¢–æ–∫–µ–Ω –∏ API –∞–¥—Ä–µ—Å
BOT_TOKEN = os.getenv("BOT_TOKEN", "7863369427:AAE1hC7Xm0Ru9Mjyox7yVZFcuQ48r4eFsBQ")
API_URL = "https://warehouse-vlad.ngrok.io"

bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()


# --- /start ---
@dp.message(F.text == "/start")
async def start_handler(message: Message):
    kb = ReplyKeyboardBuilder()
    kb.button(
        text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è",
        web_app=WebAppInfo(url=f"{API_URL}/register")
    )
    kb.button(text="–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb.as_markup(resize_keyboard=True))


# --- WebAppData (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è) ---
@dp.message(F.web_app_data)
async def handle_webapp_data(message: Message):
    try:
        data = json.loads(message.web_app_data.data)
        user_data = {
            "telegram_id": message.from_user.id,
            "first_name": data.get("first_name", ""),
            "last_name": data.get("last_name", ""),
            "phone": data.get("phone", ""),
            "role": "–Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"
        }

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        async with aiohttp.ClientSession() as session:
            async with session.post(f"{API_URL}/api/register_user", json=user_data) as resp:
                if resp.status == 200:
                    await message.answer("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
                else:
                    await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            async with session.get(f"{API_URL}/api/users") as resp:
                if resp.status == 200:
                    all_users = await resp.json()
                    for u in all_users:
                        if u.get("role") == "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä":
                            try:
                                await bot.send_message(
                                    u["telegram_id"],
                                    f"üîî –ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:\n<b>{user_data['first_name']} {user_data['last_name']}</b>\nüìû {user_data['phone']}"
                                )
                            except Exception as e:
                                logging.warning(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ {u.get('telegram_id')}: {e}")

    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")


# --- –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
@dp.message(F.text == "–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
async def all_users_handler(message: Message):
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{API_URL}/api/users") as resp:
                if resp.status != 200:
                    return await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
                users = await resp.json()

        if not users:
            return await message.answer("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")

        response = "üìã <b>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n\n"
        for user in users:
            response += f"üë§ <b>{user['first_name']} {user['last_name']}</b>\n"
            response += f"üìû {user['phone']}\n"
            response += f"üß© –†–æ–ª—å: <i>{user['role']}</i>\n\n"

        await message.answer(response)

    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞: {e}")


# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main():
    logging.basicConfig(level=logging.INFO)
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())